@inherits Component
@inject IRepositoryPerson rep

<EditForm Model="Person" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <FormGroupSt>
        <InputText class="form-control" @bind-Value="@Person.Name" />
        <ValidationMessage For="@(() => Person.Name)" />
    </FormGroupSt>

    <FormGroupSt>
        <InputDate class="form-control" @bind-Value="@Person.DateOfBirth" />
        <ValidationMessage For="@(() => Person.DateOfBirth)" />
    </FormGroupSt>

    <FormGroupSt>
        @* <InputImage Label="Select Picture" OnSelectedImage="pictureSelected" ImageURL="@imageURL" />*@
        <ImageComponent Label="Picture" OnSelectedImage="OnSelect" ImageURL="@imageURL" />
    </FormGroupSt>

    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="Person.Biography" Label="Biography" For="@(() => Person.Biography)" />
    </div>

    @if (Nav.Uri.Contains("edit"))
    {
        <button type="submit" class="btn btn-primary">Edit</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary">Save</button>
    }

</EditForm>

@code {

    [Parameter] public Person Person { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    List<string> imageURL;
    List<string> Image = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            imageURL = (await rep.GetImages()).ToList();

         }
        catch (Exception e)
        {

            Console.WriteLine(e);
        }
    }

    void OnSelect(string imageBase64)
    {

        Image.Add(imageBase64);
        Person.Picture = Image;
        imageURL = null;

    }

    private void pictureSelected(string imageBase64)
    {

        //Person.Picture = imageBase64;

        //Person.Picture = imageBase64;
        imageURL = null;
        Console.WriteLine(imageBase64);
    }

}
