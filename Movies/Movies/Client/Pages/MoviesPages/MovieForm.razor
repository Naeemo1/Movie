@inject IRepositoryPerson personRepository


<EditForm Model="Movie" OnValidSubmit="OnValidSubmitAction">
    <DataAnnotationsValidator />

    <FormGroupSt Title="Titile:">
        <InputText class="form-control" @bind-Value="@Movie.Title" />
        <ValidationMessage For="@(() => Movie.Title)" />
    </FormGroupSt>

    <FormGroupSt Title="In Theater:">
        <InputCheckbox @bind-Value="@Movie.InTheater" />
        <ValidationMessage For="@(() => Movie.InTheater)" />
    </FormGroupSt>

    <FormGroupSt Title="Trailer:">
        <InputText class="form-control" @bind-Value="@Movie.Trailer" />
        <ValidationMessage For="@(() => Movie.Trailer)" />
    </FormGroupSt>

    <FormGroupSt Title="Release Date:">
        <InputDate class="form-control" @bind-Value="@Movie.ReleaseDate" />
        <ValidationMessage For="@(() => Movie.ReleaseDate)" />
    </FormGroupSt>

    <FormGroupSt>
        <InputImage Label="SelectPicture" OnSelectedImage="@PosterSelected" ImageURL="@imageURL" />
    </FormGroupSt>

    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="Movie.Summary" Label="Summary" For="@(() => Movie.Summary)" />
    </div>

    <div class="form-group">
        <MultipleSelector NoSelected="NotSelected" Selected="Selected" >

        </MultipleSelector>
    </div>

    <div class="form-group">
        <label>Actors:</label>
        <div>
            <MultipleSelectorTypeahead Context="person" SelectedElements="SelectedActors">
                <MyResultTemplate>
                    <img src="@person.Picture" style="width:50px;" />
                    @person.Name
                </MyResultTemplate>
                <MyListTemplate>
                    @person.Name / <input type="text" placeholder="Character" @bind="person.Character" />
                </MyListTemplate>
            </MultipleSelectorTypeahead>
        </div>
    </div>



    <button type="submit" class="btn btn-primary">Save Changes</button>

</EditForm>

@code {

    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback OnValidSumbit { get; set; }
    [Parameter] public List<Genre> SelectedGenres { get; set; } = new List<Genre>();
    [Parameter] public List<Genre> NotSelectedGenres { get; set; } = new List<Genre>();
    [Parameter] public List<Person> SelectedActors { get; set; } = new List<Person>();

    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

    private string imageURL;

    protected override void OnInitialized()
    {
        Selected = SelectedGenres.Select(x => new MultipleSelectorModel(x.GenreID.ToString(), x.Name)).ToList();
        NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorModel(x.GenreID.ToString(), x.Name)).ToList();

        if (!string.IsNullOrEmpty(Movie.Poster))
        {
            imageURL = Movie.Poster;
            Movie.Poster = null;
        }
    }

    private void PosterSelected(string imageBase64)
    {
        Movie.Poster = imageBase64;
        imageURL = null;
        Console.WriteLine(imageBase64);
    }

    private async Task OnValidSubmitAction()
    {
        Movie.MoviesGenres = Selected
             .Select(x => new MoviesGenres { GenresID = int.Parse(x.Key) }).ToList();

        Movie.MoviesActors = SelectedActors
            .Select(x => new MoviesActors { PersonID = x.PersonID, Character = x.Character }).ToList();

        if (!string.IsNullOrWhiteSpace(Movie.Poster)) { imageURL = null; }

        await OnValidSumbit.InvokeAsync(null);
    }

}